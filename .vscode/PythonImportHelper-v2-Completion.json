[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "clear_screen",
        "kind": 2,
        "importPath": "CODSOFT Internship.Calculator",
        "description": "CODSOFT Internship.Calculator",
        "peekOfCode": "def clear_screen():\n    os.system(\"cls\" if os.name == \"nt\" else \"clear\")\ndef sum(a, b):\n    return a + b\ndef subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b == 0:",
        "detail": "CODSOFT Internship.Calculator",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 2,
        "importPath": "CODSOFT Internship.Calculator",
        "description": "CODSOFT Internship.Calculator",
        "peekOfCode": "def sum(a, b):\n    return a + b\ndef subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b == 0:\n        print(\"Cannot divide by zero.\")\n        return None",
        "detail": "CODSOFT Internship.Calculator",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "CODSOFT Internship.Calculator",
        "description": "CODSOFT Internship.Calculator",
        "peekOfCode": "def subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b == 0:\n        print(\"Cannot divide by zero.\")\n        return None\n    else:\n        return a / b",
        "detail": "CODSOFT Internship.Calculator",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "CODSOFT Internship.Calculator",
        "description": "CODSOFT Internship.Calculator",
        "peekOfCode": "def multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b == 0:\n        print(\"Cannot divide by zero.\")\n        return None\n    else:\n        return a / b\ndef calculator():\n    clear_screen()",
        "detail": "CODSOFT Internship.Calculator",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 2,
        "importPath": "CODSOFT Internship.Calculator",
        "description": "CODSOFT Internship.Calculator",
        "peekOfCode": "def divide(a, b):\n    if b == 0:\n        print(\"Cannot divide by zero.\")\n        return None\n    else:\n        return a / b\ndef calculator():\n    clear_screen()\n    a = int(input(\"Enter first number: \"))  # Ask for the first number initially\n    while True:",
        "detail": "CODSOFT Internship.Calculator",
        "documentation": {}
    },
    {
        "label": "calculator",
        "kind": 2,
        "importPath": "CODSOFT Internship.Calculator",
        "description": "CODSOFT Internship.Calculator",
        "peekOfCode": "def calculator():\n    clear_screen()\n    a = int(input(\"Enter first number: \"))  # Ask for the first number initially\n    while True:\n        operation = input(\"Enter operation: \")\n        if operation not in ['+', '-', '*', '/']:\n            print(\"Invalid operation\")\n            continue\n        b = int(input(\"Enter 2nd number: \"))\n        if operation == \"+\":",
        "detail": "CODSOFT Internship.Calculator",
        "documentation": {}
    },
    {
        "label": "alphabets",
        "kind": 5,
        "importPath": "CODSOFT Internship.password_generator",
        "description": "CODSOFT Internship.password_generator",
        "peekOfCode": "alphabets = int(input(f\"Enet no of alphabets: \"))\nnumbers = int(input(f\"Enter no of numbers : \"))\nspecial = int(input(f\"Enter spec chars: \"))\nalphs = string.ascii_letters\nnumbs = string.digits\nspec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))",
        "detail": "CODSOFT Internship.password_generator",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CODSOFT Internship.password_generator",
        "description": "CODSOFT Internship.password_generator",
        "peekOfCode": "numbers = int(input(f\"Enter no of numbers : \"))\nspecial = int(input(f\"Enter spec chars: \"))\nalphs = string.ascii_letters\nnumbs = string.digits\nspec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)",
        "detail": "CODSOFT Internship.password_generator",
        "documentation": {}
    },
    {
        "label": "special",
        "kind": 5,
        "importPath": "CODSOFT Internship.password_generator",
        "description": "CODSOFT Internship.password_generator",
        "peekOfCode": "special = int(input(f\"Enter spec chars: \"))\nalphs = string.ascii_letters\nnumbs = string.digits\nspec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)\nrandom.shuffle(pass_list)",
        "detail": "CODSOFT Internship.password_generator",
        "documentation": {}
    },
    {
        "label": "alphs",
        "kind": 5,
        "importPath": "CODSOFT Internship.password_generator",
        "description": "CODSOFT Internship.password_generator",
        "peekOfCode": "alphs = string.ascii_letters\nnumbs = string.digits\nspec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)\nrandom.shuffle(pass_list)\nfinal_password = ''.join(pass_list)",
        "detail": "CODSOFT Internship.password_generator",
        "documentation": {}
    },
    {
        "label": "numbs",
        "kind": 5,
        "importPath": "CODSOFT Internship.password_generator",
        "description": "CODSOFT Internship.password_generator",
        "peekOfCode": "numbs = string.digits\nspec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)\nrandom.shuffle(pass_list)\nfinal_password = ''.join(pass_list)\nprint(final_password)",
        "detail": "CODSOFT Internship.password_generator",
        "documentation": {}
    },
    {
        "label": "spec",
        "kind": 5,
        "importPath": "CODSOFT Internship.password_generator",
        "description": "CODSOFT Internship.password_generator",
        "peekOfCode": "spec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)\nrandom.shuffle(pass_list)\nfinal_password = ''.join(pass_list)\nprint(final_password)",
        "detail": "CODSOFT Internship.password_generator",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "CODSOFT Internship.password_generator",
        "description": "CODSOFT Internship.password_generator",
        "peekOfCode": "password = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)\nrandom.shuffle(pass_list)\nfinal_password = ''.join(pass_list)\nprint(final_password)",
        "detail": "CODSOFT Internship.password_generator",
        "documentation": {}
    },
    {
        "label": "pass_list",
        "kind": 5,
        "importPath": "CODSOFT Internship.password_generator",
        "description": "CODSOFT Internship.password_generator",
        "peekOfCode": "pass_list = list(password)\nrandom.shuffle(pass_list)\nfinal_password = ''.join(pass_list)\nprint(final_password)",
        "detail": "CODSOFT Internship.password_generator",
        "documentation": {}
    },
    {
        "label": "final_password",
        "kind": 5,
        "importPath": "CODSOFT Internship.password_generator",
        "description": "CODSOFT Internship.password_generator",
        "peekOfCode": "final_password = ''.join(pass_list)\nprint(final_password)",
        "detail": "CODSOFT Internship.password_generator",
        "documentation": {}
    },
    {
        "label": "play_round",
        "kind": 2,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "def play_round(user_choice):\n    global num_rds, user_score, computer_score\n    game_emojis = [\"👊\", \"✌️\", \"✋\"]\n    choices = {\"Rock\": 0, \"Scissors\": 1, \"Paper\": 2}\n    user_choice = choices[user_choice]\n    computer_choice = random.randrange(0, 3)\n    # Check the winner\n    result = \"\"\n    if user_choice == computer_choice:\n        result = \"It's a tie\"",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "end_game",
        "kind": 2,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "def end_game():\n    messagebox.showinfo(\"Game Over\", f\"Game Over!\\n\\nPlayer Score: {user_score}\\nComputer Score: {computer_score}\")\n    root.destroy()\n# Create the main window\nroot = tk.Tk()\nroot.title(\"Rock Paper Scissors Game\")\n# Initialize variables\nnum_rds = 0\nuser_score = 0\ncomputer_score = 0",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Rock Paper Scissors Game\")\n# Initialize variables\nnum_rds = 0\nuser_score = 0\ncomputer_score = 0\n# Buttons for user choices\nrock_button = tk.Button(root, text=\"Rock\", command=lambda: play_round(\"Rock\"))\nrock_button.grid(row=0, column=0, padx=(0, 10))\nscissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "num_rds",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "num_rds = 0\nuser_score = 0\ncomputer_score = 0\n# Buttons for user choices\nrock_button = tk.Button(root, text=\"Rock\", command=lambda: play_round(\"Rock\"))\nrock_button.grid(row=0, column=0, padx=(0, 10))\nscissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))\nscissors_button.grid(row=0, column=2, padx=(10, 0))\npaper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "user_score",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "user_score = 0\ncomputer_score = 0\n# Buttons for user choices\nrock_button = tk.Button(root, text=\"Rock\", command=lambda: play_round(\"Rock\"))\nrock_button.grid(row=0, column=0, padx=(0, 10))\nscissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))\nscissors_button.grid(row=0, column=2, padx=(10, 0))\npaper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)\n# Labels to display choices and result",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "computer_score",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "computer_score = 0\n# Buttons for user choices\nrock_button = tk.Button(root, text=\"Rock\", command=lambda: play_round(\"Rock\"))\nrock_button.grid(row=0, column=0, padx=(0, 10))\nscissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))\nscissors_button.grid(row=0, column=2, padx=(10, 0))\npaper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)\n# Labels to display choices and result\nuser_label = tk.Label(root, text=\"\")",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "rock_button",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "rock_button = tk.Button(root, text=\"Rock\", command=lambda: play_round(\"Rock\"))\nrock_button.grid(row=0, column=0, padx=(0, 10))\nscissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))\nscissors_button.grid(row=0, column=2, padx=(10, 0))\npaper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)\n# Labels to display choices and result\nuser_label = tk.Label(root, text=\"\")\nuser_label.grid(row=1, column=0, columnspan=3)\ncomputer_label = tk.Label(root, text=\"\")",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "scissors_button",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "scissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))\nscissors_button.grid(row=0, column=2, padx=(10, 0))\npaper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)\n# Labels to display choices and result\nuser_label = tk.Label(root, text=\"\")\nuser_label.grid(row=1, column=0, columnspan=3)\ncomputer_label = tk.Label(root, text=\"\")\ncomputer_label.grid(row=2, column=0, columnspan=3)\nresult_label = tk.Label(root, text=\"\")",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "paper_button",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "paper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)\n# Labels to display choices and result\nuser_label = tk.Label(root, text=\"\")\nuser_label.grid(row=1, column=0, columnspan=3)\ncomputer_label = tk.Label(root, text=\"\")\ncomputer_label.grid(row=2, column=0, columnspan=3)\nresult_label = tk.Label(root, text=\"\")\nresult_label.grid(row=3, column=0, columnspan=3)\n# Labels to display scores",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "user_label",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "user_label = tk.Label(root, text=\"\")\nuser_label.grid(row=1, column=0, columnspan=3)\ncomputer_label = tk.Label(root, text=\"\")\ncomputer_label.grid(row=2, column=0, columnspan=3)\nresult_label = tk.Label(root, text=\"\")\nresult_label.grid(row=3, column=0, columnspan=3)\n# Labels to display scores\nplayer_score_label = tk.Label(root, text=f\"Player Score: {user_score}\")\nplayer_score_label.grid(row=4, column=0, columnspan=3)\ncomputer_score_label = tk.Label(root, text=f\"Computer Score: {computer_score}\")",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "computer_label",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "computer_label = tk.Label(root, text=\"\")\ncomputer_label.grid(row=2, column=0, columnspan=3)\nresult_label = tk.Label(root, text=\"\")\nresult_label.grid(row=3, column=0, columnspan=3)\n# Labels to display scores\nplayer_score_label = tk.Label(root, text=f\"Player Score: {user_score}\")\nplayer_score_label.grid(row=4, column=0, columnspan=3)\ncomputer_score_label = tk.Label(root, text=f\"Computer Score: {computer_score}\")\ncomputer_score_label.grid(row=5, column=0, columnspan=3)\n# Run the application",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "result_label",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "result_label = tk.Label(root, text=\"\")\nresult_label.grid(row=3, column=0, columnspan=3)\n# Labels to display scores\nplayer_score_label = tk.Label(root, text=f\"Player Score: {user_score}\")\nplayer_score_label.grid(row=4, column=0, columnspan=3)\ncomputer_score_label = tk.Label(root, text=f\"Computer Score: {computer_score}\")\ncomputer_score_label.grid(row=5, column=0, columnspan=3)\n# Run the application\nroot.mainloop()",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "player_score_label",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "player_score_label = tk.Label(root, text=f\"Player Score: {user_score}\")\nplayer_score_label.grid(row=4, column=0, columnspan=3)\ncomputer_score_label = tk.Label(root, text=f\"Computer Score: {computer_score}\")\ncomputer_score_label.grid(row=5, column=0, columnspan=3)\n# Run the application\nroot.mainloop()",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "computer_score_label",
        "kind": 5,
        "importPath": "CODSOFT Internship.Rock_Paper_Scissor",
        "description": "CODSOFT Internship.Rock_Paper_Scissor",
        "peekOfCode": "computer_score_label = tk.Label(root, text=f\"Computer Score: {computer_score}\")\ncomputer_score_label.grid(row=5, column=0, columnspan=3)\n# Run the application\nroot.mainloop()",
        "detail": "CODSOFT Internship.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "Core Concepts.Caesar_Cypher",
        "description": "Core Concepts.Caesar_Cypher",
        "peekOfCode": "def encode(msg, shift):\n    encoded_msg = \"\"\n    for char in msg:\n        if char in ascii_lowercase:\n            index = (ascii_lowercase.index(char) + shift) % 26\n            encoded_msg += ascii_lowercase[index]\n        elif char in ascii_uppercase:\n            index = (ascii_uppercase.index(char) + shift) % 26\n            encoded_msg += ascii_uppercase[index]\n        else:",
        "detail": "Core Concepts.Caesar_Cypher",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "Core Concepts.Caesar_Cypher",
        "description": "Core Concepts.Caesar_Cypher",
        "peekOfCode": "def decode(msg, shift):\n    return encode(msg, -shift)\nmsg = input(\"Enter your message: \")\nop = input(\"Enter the type of operation (Encode or Decode): \").lower()\nshift = int(input(\"How many positions do you want to shift? \"))\nif op == \"encode\":\n    encoded_message = encode(msg, shift)\n    print(\"Encoded message:\", encoded_message)\nelif op == \"decode\":\n    decoded_message = decode(msg, shift)",
        "detail": "Core Concepts.Caesar_Cypher",
        "documentation": {}
    },
    {
        "label": "msg",
        "kind": 5,
        "importPath": "Core Concepts.Caesar_Cypher",
        "description": "Core Concepts.Caesar_Cypher",
        "peekOfCode": "msg = input(\"Enter your message: \")\nop = input(\"Enter the type of operation (Encode or Decode): \").lower()\nshift = int(input(\"How many positions do you want to shift? \"))\nif op == \"encode\":\n    encoded_message = encode(msg, shift)\n    print(\"Encoded message:\", encoded_message)\nelif op == \"decode\":\n    decoded_message = decode(msg, shift)\n    print(\"Decoded message:\", decoded_message)\nelse:",
        "detail": "Core Concepts.Caesar_Cypher",
        "documentation": {}
    },
    {
        "label": "op",
        "kind": 5,
        "importPath": "Core Concepts.Caesar_Cypher",
        "description": "Core Concepts.Caesar_Cypher",
        "peekOfCode": "op = input(\"Enter the type of operation (Encode or Decode): \").lower()\nshift = int(input(\"How many positions do you want to shift? \"))\nif op == \"encode\":\n    encoded_message = encode(msg, shift)\n    print(\"Encoded message:\", encoded_message)\nelif op == \"decode\":\n    decoded_message = decode(msg, shift)\n    print(\"Decoded message:\", decoded_message)\nelse:\n    print(\"Invalid operation. Please choose 'encode' or 'decode'.\")",
        "detail": "Core Concepts.Caesar_Cypher",
        "documentation": {}
    },
    {
        "label": "shift",
        "kind": 5,
        "importPath": "Core Concepts.Caesar_Cypher",
        "description": "Core Concepts.Caesar_Cypher",
        "peekOfCode": "shift = int(input(\"How many positions do you want to shift? \"))\nif op == \"encode\":\n    encoded_message = encode(msg, shift)\n    print(\"Encoded message:\", encoded_message)\nelif op == \"decode\":\n    decoded_message = decode(msg, shift)\n    print(\"Decoded message:\", decoded_message)\nelse:\n    print(\"Invalid operation. Please choose 'encode' or 'decode'.\")",
        "detail": "Core Concepts.Caesar_Cypher",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 2,
        "importPath": "Core Concepts.Guess_the_number",
        "description": "Core Concepts.Guess_the_number",
        "peekOfCode": "def guess():\n    attempts = 5 if level == \"hard\" else 10\n    print(f\"You have only {attempts} attempts to guess.\")\n    for i in range(1, attempts + 1):\n        while True:\n            guess = input(\"Make a guess: \")\n            if guess.isdigit():\n                guess = int(guess)\n                if 1 <= guess <= 50:\n                    break",
        "detail": "Core Concepts.Guess_the_number",
        "documentation": {}
    },
    {
        "label": "guess1",
        "kind": 5,
        "importPath": "Core Concepts.Guess_the_number",
        "description": "Core Concepts.Guess_the_number",
        "peekOfCode": "guess1 = random.randint(1, 50)\nlevel = input(\"Choose your difficulty level (Hard or Easy): \").lower()\ndef guess():\n    attempts = 5 if level == \"hard\" else 10\n    print(f\"You have only {attempts} attempts to guess.\")\n    for i in range(1, attempts + 1):\n        while True:\n            guess = input(\"Make a guess: \")\n            if guess.isdigit():\n                guess = int(guess)",
        "detail": "Core Concepts.Guess_the_number",
        "documentation": {}
    },
    {
        "label": "level",
        "kind": 5,
        "importPath": "Core Concepts.Guess_the_number",
        "description": "Core Concepts.Guess_the_number",
        "peekOfCode": "level = input(\"Choose your difficulty level (Hard or Easy): \").lower()\ndef guess():\n    attempts = 5 if level == \"hard\" else 10\n    print(f\"You have only {attempts} attempts to guess.\")\n    for i in range(1, attempts + 1):\n        while True:\n            guess = input(\"Make a guess: \")\n            if guess.isdigit():\n                guess = int(guess)\n                if 1 <= guess <= 50:",
        "detail": "Core Concepts.Guess_the_number",
        "documentation": {}
    },
    {
        "label": "length_actual_word",
        "kind": 5,
        "importPath": "Core Concepts.Hangman_Game",
        "description": "Core Concepts.Hangman_Game",
        "peekOfCode": "length_actual_word = random.randrange(4, 5)\nstring1 = string.ascii_lowercase\nactual_word = \"\".join(random.choice(string1) for items in range(length_actual_word))\nprint(actual_word)\n#generate blanks\nsample = []\nfor word in actual_word:\n    sample += \"_\"\nprint(sample)\n#Guessing and loops",
        "detail": "Core Concepts.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "Core Concepts.Hangman_Game",
        "description": "Core Concepts.Hangman_Game",
        "peekOfCode": "string1 = string.ascii_lowercase\nactual_word = \"\".join(random.choice(string1) for items in range(length_actual_word))\nprint(actual_word)\n#generate blanks\nsample = []\nfor word in actual_word:\n    sample += \"_\"\nprint(sample)\n#Guessing and loops\nlife = (len(actual_word) + 1)",
        "detail": "Core Concepts.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "actual_word",
        "kind": 5,
        "importPath": "Core Concepts.Hangman_Game",
        "description": "Core Concepts.Hangman_Game",
        "peekOfCode": "actual_word = \"\".join(random.choice(string1) for items in range(length_actual_word))\nprint(actual_word)\n#generate blanks\nsample = []\nfor word in actual_word:\n    sample += \"_\"\nprint(sample)\n#Guessing and loops\nlife = (len(actual_word) + 1)\ngame_over = False",
        "detail": "Core Concepts.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "sample",
        "kind": 5,
        "importPath": "Core Concepts.Hangman_Game",
        "description": "Core Concepts.Hangman_Game",
        "peekOfCode": "sample = []\nfor word in actual_word:\n    sample += \"_\"\nprint(sample)\n#Guessing and loops\nlife = (len(actual_word) + 1)\ngame_over = False\nwhile not game_over:\n    guessed_word = input(\"Enter a letter: \").lower()\n    for i in range(len(actual_word)): #0,1,2,3....",
        "detail": "Core Concepts.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "life",
        "kind": 5,
        "importPath": "Core Concepts.Hangman_Game",
        "description": "Core Concepts.Hangman_Game",
        "peekOfCode": "life = (len(actual_word) + 1)\ngame_over = False\nwhile not game_over:\n    guessed_word = input(\"Enter a letter: \").lower()\n    for i in range(len(actual_word)): #0,1,2,3....\n        if actual_word[i] == guessed_word: \n            sample[i] = guessed_word\n    print(sample)\n    if guessed_word not in actual_word:\n        life -= 1",
        "detail": "Core Concepts.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "game_over",
        "kind": 5,
        "importPath": "Core Concepts.Hangman_Game",
        "description": "Core Concepts.Hangman_Game",
        "peekOfCode": "game_over = False\nwhile not game_over:\n    guessed_word = input(\"Enter a letter: \").lower()\n    for i in range(len(actual_word)): #0,1,2,3....\n        if actual_word[i] == guessed_word: \n            sample[i] = guessed_word\n    print(sample)\n    if guessed_word not in actual_word:\n        life -= 1\n        print(f\"Wrong guess. You are left with {life} lives\")",
        "detail": "Core Concepts.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "account_info",
        "kind": 2,
        "importPath": "Core Concepts.Higher_Lower",
        "description": "Core Concepts.Higher_Lower",
        "peekOfCode": "def account_info(account):\n    a_name = account[\"name\"]\n    a_description = account[\"description\"]\n    a_country = account[\"country\"]\n    return (f\"{a_name}, {a_description}, from {a_country}\")\n#picking info\naccount1 = random.choice(data)\naccount2 = random.choice(data)\ncontinue_flag = True\nwhile continue_flag:",
        "detail": "Core Concepts.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "art",
        "kind": 5,
        "importPath": "Core Concepts.Higher_Lower",
        "description": "Core Concepts.Higher_Lower",
        "peekOfCode": "art = \"\"\"\n  .       ..-. \n   \\     /(   )\n    \\   /  `-. \n     \\ /  (   )\n      '    `-'  \"\"\"\ngame_logo = '''                                \n  |   ||,---.|   |,---.,---.\n  |---|||  _.|---||--- |---'\n  |   |||   ||   ||    |  \\_ ",
        "detail": "Core Concepts.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "game_logo",
        "kind": 5,
        "importPath": "Core Concepts.Higher_Lower",
        "description": "Core Concepts.Higher_Lower",
        "peekOfCode": "game_logo = '''                                \n  |   ||,---.|   |,---.,---.\n  |---|||  _.|---||--- |---'\n  |   |||   ||   ||    |  \\_ \n  `   '``---'`   '`---'`   `-\n  |    ,---.. . .,---.,---. \n  |    |   || | ||--- |---' \n  |    |   || | ||    |  \\_  \n  `---'`---'`-'-'`---'`   `-   '''\ndata = [",
        "detail": "Core Concepts.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Core Concepts.Higher_Lower",
        "description": "Core Concepts.Higher_Lower",
        "peekOfCode": "data = [\n    {\n        'name': 'Instagram',\n        'follower_count': 346,\n        'description': 'Social media platform',\n        'country': 'United States'\n    },\n    {\n        'name': 'Cristiano Ronaldo',\n        'follower_count': 215,",
        "detail": "Core Concepts.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "Core Concepts.Higher_Lower",
        "description": "Core Concepts.Higher_Lower",
        "peekOfCode": "score = 0\n# def accoun info\ndef account_info(account):\n    a_name = account[\"name\"]\n    a_description = account[\"description\"]\n    a_country = account[\"country\"]\n    return (f\"{a_name}, {a_description}, from {a_country}\")\n#picking info\naccount1 = random.choice(data)\naccount2 = random.choice(data)",
        "detail": "Core Concepts.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "account1",
        "kind": 5,
        "importPath": "Core Concepts.Higher_Lower",
        "description": "Core Concepts.Higher_Lower",
        "peekOfCode": "account1 = random.choice(data)\naccount2 = random.choice(data)\ncontinue_flag = True\nwhile continue_flag:\n    account1 = account2\n    account2 = random.choice(data)\n    while account1 == account2:\n        account2 = random.choice(data)\n    def check_answer(guess, follower1, follower2):\n        if follower1>follower2:",
        "detail": "Core Concepts.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "account2",
        "kind": 5,
        "importPath": "Core Concepts.Higher_Lower",
        "description": "Core Concepts.Higher_Lower",
        "peekOfCode": "account2 = random.choice(data)\ncontinue_flag = True\nwhile continue_flag:\n    account1 = account2\n    account2 = random.choice(data)\n    while account1 == account2:\n        account2 = random.choice(data)\n    def check_answer(guess, follower1, follower2):\n        if follower1>follower2:\n            if guess == 1:",
        "detail": "Core Concepts.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "continue_flag",
        "kind": 5,
        "importPath": "Core Concepts.Higher_Lower",
        "description": "Core Concepts.Higher_Lower",
        "peekOfCode": "continue_flag = True\nwhile continue_flag:\n    account1 = account2\n    account2 = random.choice(data)\n    while account1 == account2:\n        account2 = random.choice(data)\n    def check_answer(guess, follower1, follower2):\n        if follower1>follower2:\n            if guess == 1:\n                return True",
        "detail": "Core Concepts.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "clear_screen",
        "kind": 2,
        "importPath": "Core Concepts.Silent_Auction",
        "description": "Core Concepts.Silent_Auction",
        "peekOfCode": "def clear_screen():\n    os.system(\"cls\")\nprint(\"*********Welcome to Silent Auction***********\")\ndef highest_bidder():\n    bidding_data = {}\n    while True:\n        name = input(\"Enter your name: \")\n        is_company = input(\"Are you from a company? (yes/no): \").lower()\n        if is_company == \"yes\":\n            company_name = input(\"Enter the name of your company: \")",
        "detail": "Core Concepts.Silent_Auction",
        "documentation": {}
    },
    {
        "label": "highest_bidder",
        "kind": 2,
        "importPath": "Core Concepts.Silent_Auction",
        "description": "Core Concepts.Silent_Auction",
        "peekOfCode": "def highest_bidder():\n    bidding_data = {}\n    while True:\n        name = input(\"Enter your name: \")\n        is_company = input(\"Are you from a company? (yes/no): \").lower()\n        if is_company == \"yes\":\n            company_name = input(\"Enter the name of your company: \")\n        else:\n            company_name = None\n        bid = int(input(\"Enter your bid value: \"))",
        "detail": "Core Concepts.Silent_Auction",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "OOP Concepts.Polymorphism.duck_typing",
        "description": "OOP Concepts.Polymorphism.duck_typing",
        "peekOfCode": "class Dog:\n    def swim(self):\n        print(\"I'm a dog and I can swim\")\n    def display(self):\n        print(\"Display from Dog class\")\n    def bark(self):\n        print(\"I am a dog and I bark\")\nclass Owl:\n    def swim(self):\n        print(\"I am an owl and I don't swim\")",
        "detail": "OOP Concepts.Polymorphism.duck_typing",
        "documentation": {}
    },
    {
        "label": "Owl",
        "kind": 6,
        "importPath": "OOP Concepts.Polymorphism.duck_typing",
        "description": "OOP Concepts.Polymorphism.duck_typing",
        "peekOfCode": "class Owl:\n    def swim(self):\n        print(\"I am an owl and I don't swim\")\n    def bark(self):\n        print(\"I am an owl and I don't bark\")\ndef display(obj): #obj can be changed or of any type but what matter is the methods it have....\n    obj.swim()\n    obj.bark()\ndog1 = Dog() #Instance of Dog\nowl1 = Owl() # Instance of owl",
        "detail": "OOP Concepts.Polymorphism.duck_typing",
        "documentation": {}
    },
    {
        "label": "display",
        "kind": 2,
        "importPath": "OOP Concepts.Polymorphism.duck_typing",
        "description": "OOP Concepts.Polymorphism.duck_typing",
        "peekOfCode": "def display(obj): #obj can be changed or of any type but what matter is the methods it have....\n    obj.swim()\n    obj.bark()\ndog1 = Dog() #Instance of Dog\nowl1 = Owl() # Instance of owl\ndog1.display()\ndisplay(owl1)",
        "detail": "OOP Concepts.Polymorphism.duck_typing",
        "documentation": {}
    },
    {
        "label": "dog1",
        "kind": 5,
        "importPath": "OOP Concepts.Polymorphism.duck_typing",
        "description": "OOP Concepts.Polymorphism.duck_typing",
        "peekOfCode": "dog1 = Dog() #Instance of Dog\nowl1 = Owl() # Instance of owl\ndog1.display()\ndisplay(owl1)",
        "detail": "OOP Concepts.Polymorphism.duck_typing",
        "documentation": {}
    },
    {
        "label": "owl1",
        "kind": 5,
        "importPath": "OOP Concepts.Polymorphism.duck_typing",
        "description": "OOP Concepts.Polymorphism.duck_typing",
        "peekOfCode": "owl1 = Owl() # Instance of owl\ndog1.display()\ndisplay(owl1)",
        "detail": "OOP Concepts.Polymorphism.duck_typing",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "OOP Concepts.Polymorphism.method_overriding",
        "description": "OOP Concepts.Polymorphism.method_overriding",
        "peekOfCode": "class Human:\n    def eat(self):\n        print(\"I can eat\")\n    def walk(self):\n        print(\"I can walk\")\nclass Male(Human):\n    def eat(self):\n        print(\"I need more calories than a lady\")\n        super().eat()\n    def walk(self):",
        "detail": "OOP Concepts.Polymorphism.method_overriding",
        "documentation": {}
    },
    {
        "label": "Male",
        "kind": 6,
        "importPath": "OOP Concepts.Polymorphism.method_overriding",
        "description": "OOP Concepts.Polymorphism.method_overriding",
        "peekOfCode": "class Male(Human):\n    def eat(self):\n        print(\"I need more calories than a lady\")\n        super().eat()\n    def walk(self):\n        print(\"I can walk and run faster tan a lady normally.\")\nm1 = Male()\nm1.eat()",
        "detail": "OOP Concepts.Polymorphism.method_overriding",
        "documentation": {}
    },
    {
        "label": "m1",
        "kind": 5,
        "importPath": "OOP Concepts.Polymorphism.method_overriding",
        "description": "OOP Concepts.Polymorphism.method_overriding",
        "peekOfCode": "m1 = Male()\nm1.eat()",
        "detail": "OOP Concepts.Polymorphism.method_overriding",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "OOP Concepts.Polymorphism.operator_overloading",
        "description": "OOP Concepts.Polymorphism.operator_overloading",
        "peekOfCode": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def __add__(self, other):\n        return f\"{self.name} is {self.age} years old and {other.name} is {other.age} years old.\"\n    def __gt__(self, other):\n        pass\np1 = Person(\"Tayyab\", 24)\np2 = Person(\"Ali\", 26)",
        "detail": "OOP Concepts.Polymorphism.operator_overloading",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "OOP Concepts.Polymorphism.operator_overloading",
        "description": "OOP Concepts.Polymorphism.operator_overloading",
        "peekOfCode": "p1 = Person(\"Tayyab\", 24)\np2 = Person(\"Ali\", 26)\nc = p1 + p2\nprint(c)\nif p1 > p2:\n    print(f\"{p1.name} is older than {p2.name}\")\nelse:\n    print(f\"{p2.name} is older than {p1.name}\")",
        "detail": "OOP Concepts.Polymorphism.operator_overloading",
        "documentation": {}
    },
    {
        "label": "p2",
        "kind": 5,
        "importPath": "OOP Concepts.Polymorphism.operator_overloading",
        "description": "OOP Concepts.Polymorphism.operator_overloading",
        "peekOfCode": "p2 = Person(\"Ali\", 26)\nc = p1 + p2\nprint(c)\nif p1 > p2:\n    print(f\"{p1.name} is older than {p2.name}\")\nelse:\n    print(f\"{p2.name} is older than {p1.name}\")",
        "detail": "OOP Concepts.Polymorphism.operator_overloading",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "OOP Concepts.Polymorphism.operator_overloading",
        "description": "OOP Concepts.Polymorphism.operator_overloading",
        "peekOfCode": "c = p1 + p2\nprint(c)\nif p1 > p2:\n    print(f\"{p1.name} is older than {p2.name}\")\nelse:\n    print(f\"{p2.name} is older than {p1.name}\")",
        "detail": "OOP Concepts.Polymorphism.operator_overloading",
        "documentation": {}
    },
    {
        "label": "DataStorage",
        "kind": 6,
        "importPath": "OOP Concepts.abstraction_and_FileHandling",
        "description": "OOP Concepts.abstraction_and_FileHandling",
        "peekOfCode": "class DataStorage(ABC):\n    @abstractmethod\n    def store(self, key, data):\n        pass\n    @abstractmethod\n    def retrieve(self, key):\n        pass\nclass FileStorage(DataStorage):\n    def store(self, key, data):\n        file = open(key, \"w\")",
        "detail": "OOP Concepts.abstraction_and_FileHandling",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "kind": 6,
        "importPath": "OOP Concepts.abstraction_and_FileHandling",
        "description": "OOP Concepts.abstraction_and_FileHandling",
        "peekOfCode": "class FileStorage(DataStorage):\n    def store(self, key, data):\n        file = open(key, \"w\")\n        file.write(data)\n    def retrieve(self, key):\n        file = open(key, \"r\")\n        return file.read()\nif __name__ == \"__main__\": # to run directly and save from use as module\n    storage = FileStorage()\n    storage.store(\"data.txt\", \"Hello, world!\") # Store Data",
        "detail": "OOP Concepts.abstraction_and_FileHandling",
        "documentation": {}
    },
    {
        "label": "BankAccountDetails",
        "kind": 6,
        "importPath": "OOP Concepts.dunder_methods",
        "description": "OOP Concepts.dunder_methods",
        "peekOfCode": "class BankAccountDetails:\n    def __init__(self, account_holder_name, balance=0):\n        self.account_holder_name = account_holder_name\n        self.balance = balance\n    def deposit(self, amount):\n        self.balance = self.balance + amount\n        print(f\"Deposit of {amount} is sucessful. New Balance is {self.balance}\")\n    def withdraw(self, amount):\n        if amount > self.balance:\n            print(f\"Cannot make transaction. Max withdrawl amount is {self.balance}\")",
        "detail": "OOP Concepts.dunder_methods",
        "documentation": {}
    },
    {
        "label": "account1",
        "kind": 5,
        "importPath": "OOP Concepts.dunder_methods",
        "description": "OOP Concepts.dunder_methods",
        "peekOfCode": "account1 = BankAccountDetails(\"Shanza\", 54598)\nprint(account1)\naccount1.deposit(2500)\naccount1.withdraw(1600)\nprint(account1())",
        "detail": "OOP Concepts.dunder_methods",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "OOP Concepts.Encapsulation",
        "description": "OOP Concepts.Encapsulation",
        "peekOfCode": "class Student:\n    def __init__(self, name, age, roll_no):\n        self.name = name\n        self._roll_no = roll_no #Protected Attrib (Don't work exactly as desired in Python. Can be accessed)\n        self.__age = age  # Private attribute \n    def get_actualAge(self):\n        return self.__age\n    def set_age(self, age):\n        self.__age = age\n    def display_details(self):",
        "detail": "OOP Concepts.Encapsulation",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "OOP Concepts.Encapsulation",
        "description": "OOP Concepts.Encapsulation",
        "peekOfCode": "s1 = Student(\"Tayyab\", 23, 234567)\nprint(s1._Student__age)\ns1.display_details()  # Display using public function\ns1.set_age(41)  # Using setter method\nprint(s1.get_actualAge())  # Accessing updated age using getter method\ns1.display_details()  # Display updated details",
        "detail": "OOP Concepts.Encapsulation",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "OOP Concepts.Quiz_Game",
        "description": "OOP Concepts.Quiz_Game",
        "peekOfCode": "class Question:\n    def __init__(self, text, options, correct_answer):\n        self.text = text\n        self.options = options\n        self.correct_answer = correct_answer\n    def display(self):\n        print(self.text)\n        for i, option in enumerate(self.options):  # Start from 0 auto as enumerate knows what start means\n            print(f\"{string.ascii_uppercase[i]}. {option}\")\nclass Quiz:",
        "detail": "OOP Concepts.Quiz_Game",
        "documentation": {}
    },
    {
        "label": "Quiz",
        "kind": 6,
        "importPath": "OOP Concepts.Quiz_Game",
        "description": "OOP Concepts.Quiz_Game",
        "peekOfCode": "class Quiz:\n    def __init__(self, questions):\n        self.questions = questions\n        self.score = 0\n    def display_question(self, question):\n        question.display()\n        user_answer = input(\"Choose A/B/C/D: \").upper()\n        if user_answer == question.correct_answer:\n            print(\"Correct Answer!\")\n            self.score += 1",
        "detail": "OOP Concepts.Quiz_Game",
        "documentation": {}
    },
    {
        "label": "questions",
        "kind": 5,
        "importPath": "OOP Concepts.Quiz_Game",
        "description": "OOP Concepts.Quiz_Game",
        "peekOfCode": "questions = [\n    Question(\"Which planet is known as the 'Red Planet'?\", [\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"], \"B\"),\n    Question(\"Author of the Harry Potter?\", [\"J.K. Rowling\", \"S. King\", \"G. Martin\", \"Suzanne Collins\"], \"A\"),\n]\nquiz = Quiz(questions)\nquiz.run_quiz()",
        "detail": "OOP Concepts.Quiz_Game",
        "documentation": {}
    },
    {
        "label": "quiz",
        "kind": 5,
        "importPath": "OOP Concepts.Quiz_Game",
        "description": "OOP Concepts.Quiz_Game",
        "peekOfCode": "quiz = Quiz(questions)\nquiz.run_quiz()",
        "detail": "OOP Concepts.Quiz_Game",
        "documentation": {}
    },
    {
        "label": "Vehicle",
        "kind": 6,
        "importPath": "OOP Concepts.Vehicle_Mgmt_Sys",
        "description": "OOP Concepts.Vehicle_Mgmt_Sys",
        "peekOfCode": "class Vehicle:\n    def __init__(self, make, model, color, year, price):\n        self.make = make\n        self. model = model\n        self.color = color\n        self.year = year\n        self.price = price\n    def display(self):\n        return(f\"It's a {self.year} {self.make} {self.model} of {self.color} color having price of {self.price}$.\")\nclass Car(Vehicle):",
        "detail": "OOP Concepts.Vehicle_Mgmt_Sys",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "OOP Concepts.Vehicle_Mgmt_Sys",
        "description": "OOP Concepts.Vehicle_Mgmt_Sys",
        "peekOfCode": "class Car(Vehicle):\n    def __init__(self, make, model, color, year, price, doors, fuel_type):\n        super().__init__(make, model, color, year, price)\n        self.doors = doors\n        self.fuel_type = fuel_type\n    def display(self):\n        return(f\"It's a {self.year} {self.make} {self.model} of {self.color} color having {self.doors} doors, {self.fuel_type} operated and with a price of {self.price}$.\")\nclass Motorcycle(Vehicle):\n    def __init__(self, make, model, color, year, price, engine_size, type):\n        super().__init__(make, model, color, year, price)",
        "detail": "OOP Concepts.Vehicle_Mgmt_Sys",
        "documentation": {}
    },
    {
        "label": "Motorcycle",
        "kind": 6,
        "importPath": "OOP Concepts.Vehicle_Mgmt_Sys",
        "description": "OOP Concepts.Vehicle_Mgmt_Sys",
        "peekOfCode": "class Motorcycle(Vehicle):\n    def __init__(self, make, model, color, year, price, engine_size, type):\n        super().__init__(make, model, color, year, price)\n        self.engine_size = engine_size\n        self.type = type\n    def display(self):\n        return(f\"It's a {self.year} {self.make} {self.model} {self.type} of {self.color} color having {self.engine_size} engine capacity with a price of {self.price}$.\")\nclass Truck(Vehicle):\n    def __init__(self, make, model, color, year, price, bed_size, four_wheel_drive):\n        super().__init__(make, model, color, year, price)",
        "detail": "OOP Concepts.Vehicle_Mgmt_Sys",
        "documentation": {}
    },
    {
        "label": "Truck",
        "kind": 6,
        "importPath": "OOP Concepts.Vehicle_Mgmt_Sys",
        "description": "OOP Concepts.Vehicle_Mgmt_Sys",
        "peekOfCode": "class Truck(Vehicle):\n    def __init__(self, make, model, color, year, price, bed_size, four_wheel_drive):\n        super().__init__(make, model, color, year, price)\n        self.bed_size = bed_size\n        self.four_wheel_drive = four_wheel_drive\n    def display(self):\n        if self.four_wheel_drive == True:\n            return(f\"It's a {self.year} {self.bed_size} a four wheel drive {self.make} {self.model} of {self.color} color with a price of {self.price}$.\")\n        else:\n            return(f\"It's a {self.year} {self.bed_size} {self.make} {self.model} of {self.color} color with a price of {self.price}$.\")",
        "detail": "OOP Concepts.Vehicle_Mgmt_Sys",
        "documentation": {}
    },
    {
        "label": "car1",
        "kind": 5,
        "importPath": "OOP Concepts.Vehicle_Mgmt_Sys",
        "description": "OOP Concepts.Vehicle_Mgmt_Sys",
        "peekOfCode": "car1 = Car(\"Toyota\", \"Camry\", \"Red\" , 2022, 25000, 4, \"Gasoline\")\nmotorcycle1 = Motorcycle(\"Harley-Davidson\", \"Sportster\", \"Black\", 2020, 12000, \"1200cc\", \"Cruiser\")\ntruck1 = Truck(\"Ford\", \"F-150\", \"Silver\", 2019, 35000, \"Short\", True)\n# Display details of each vehicle\nprint(car1.display())\nprint(motorcycle1.display())\nprint(truck1.display())",
        "detail": "OOP Concepts.Vehicle_Mgmt_Sys",
        "documentation": {}
    },
    {
        "label": "motorcycle1",
        "kind": 5,
        "importPath": "OOP Concepts.Vehicle_Mgmt_Sys",
        "description": "OOP Concepts.Vehicle_Mgmt_Sys",
        "peekOfCode": "motorcycle1 = Motorcycle(\"Harley-Davidson\", \"Sportster\", \"Black\", 2020, 12000, \"1200cc\", \"Cruiser\")\ntruck1 = Truck(\"Ford\", \"F-150\", \"Silver\", 2019, 35000, \"Short\", True)\n# Display details of each vehicle\nprint(car1.display())\nprint(motorcycle1.display())\nprint(truck1.display())",
        "detail": "OOP Concepts.Vehicle_Mgmt_Sys",
        "documentation": {}
    },
    {
        "label": "truck1",
        "kind": 5,
        "importPath": "OOP Concepts.Vehicle_Mgmt_Sys",
        "description": "OOP Concepts.Vehicle_Mgmt_Sys",
        "peekOfCode": "truck1 = Truck(\"Ford\", \"F-150\", \"Silver\", 2019, 35000, \"Short\", True)\n# Display details of each vehicle\nprint(car1.display())\nprint(motorcycle1.display())\nprint(truck1.display())",
        "detail": "OOP Concepts.Vehicle_Mgmt_Sys",
        "documentation": {}
    },
    {
        "label": "colour",
        "kind": 5,
        "importPath": "tURTLE cODING.exercise3",
        "description": "tURTLE cODING.exercise3",
        "peekOfCode": "colour = [\"red\", \"green\", \"purple\", \"black\", \"yellow\", \"blue\", \"brown\", \"cyan\", \"chocolate1\"]\nfor i in range(3, 9):\n    angle = 360/ i\n    pencolor(random.choice(colour))\n    for j in range(i):\n        forward(100)\n        right(angle)\nexitonclick()",
        "detail": "tURTLE cODING.exercise3",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "tURTLE cODING.exercise4",
        "description": "tURTLE cODING.exercise4",
        "peekOfCode": "colors = [\"red\", \"green\", \"purple\", \"black\", \"yellow\", \"blue\", \"brown\", \"cyan\", \"chocolate1\"]\ndirections = [forward(50), back(90), left(90), right(90)]\nfor i in range(50):\n    setheading(random.randrange(0, 360, 90)) # 0 90 180 270\n    pencolor(random.choice(colors))\n    forward(30)\nhideturtle()\nexitonclick()",
        "detail": "tURTLE cODING.exercise4",
        "documentation": {}
    },
    {
        "label": "directions",
        "kind": 5,
        "importPath": "tURTLE cODING.exercise4",
        "description": "tURTLE cODING.exercise4",
        "peekOfCode": "directions = [forward(50), back(90), left(90), right(90)]\nfor i in range(50):\n    setheading(random.randrange(0, 360, 90)) # 0 90 180 270\n    pencolor(random.choice(colors))\n    forward(30)\nhideturtle()\nexitonclick()",
        "detail": "tURTLE cODING.exercise4",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "tURTLE cODING.exercise6",
        "description": "tURTLE cODING.exercise6",
        "peekOfCode": "colors = [\"red\", \"green\", \"purple\", \"black\", \"yellow\", \"blue\", \"brown\", \"cyan\", \"chocolate1\"]\nfor i in range(100):\n    penup()\n    # setheading(random.randint(25, 375))\n    goto(random.randint(-300,300), random.randint(-300,300))\n    # forward(50)\n    pencolor(random.choice(colors))\n    dot(20)\n    pendown()\nexitonclick()",
        "detail": "tURTLE cODING.exercise6",
        "documentation": {}
    }
]