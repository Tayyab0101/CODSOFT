[
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "CODSOFT.Caesar_Cypher",
        "description": "CODSOFT.Caesar_Cypher",
        "peekOfCode": "def encode(msg, shift):\n    encoded_msg = \"\"\n    for char in msg:\n        if char in ascii_lowercase:\n            index = (ascii_lowercase.index(char) + shift) % 26\n            encoded_msg += ascii_lowercase[index]\n        elif char in ascii_uppercase:\n            index = (ascii_uppercase.index(char) + shift) % 26\n            encoded_msg += ascii_uppercase[index]\n        else:",
        "detail": "CODSOFT.Caesar_Cypher",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "CODSOFT.Caesar_Cypher",
        "description": "CODSOFT.Caesar_Cypher",
        "peekOfCode": "def decode(msg, shift):\n    return encode(msg, -shift)\nmsg = input(\"Enter your message: \")\nop = input(\"Enter the type of operation (Encode or Decode): \").lower()\nshift = int(input(\"How many positions do you want to shift? \"))\nif op == \"encode\":\n    encoded_message = encode(msg, shift)\n    print(\"Encoded message:\", encoded_message)\nelif op == \"decode\":\n    decoded_message = decode(msg, shift)",
        "detail": "CODSOFT.Caesar_Cypher",
        "documentation": {}
    },
    {
        "label": "msg",
        "kind": 5,
        "importPath": "CODSOFT.Caesar_Cypher",
        "description": "CODSOFT.Caesar_Cypher",
        "peekOfCode": "msg = input(\"Enter your message: \")\nop = input(\"Enter the type of operation (Encode or Decode): \").lower()\nshift = int(input(\"How many positions do you want to shift? \"))\nif op == \"encode\":\n    encoded_message = encode(msg, shift)\n    print(\"Encoded message:\", encoded_message)\nelif op == \"decode\":\n    decoded_message = decode(msg, shift)\n    print(\"Decoded message:\", decoded_message)\nelse:",
        "detail": "CODSOFT.Caesar_Cypher",
        "documentation": {}
    },
    {
        "label": "op",
        "kind": 5,
        "importPath": "CODSOFT.Caesar_Cypher",
        "description": "CODSOFT.Caesar_Cypher",
        "peekOfCode": "op = input(\"Enter the type of operation (Encode or Decode): \").lower()\nshift = int(input(\"How many positions do you want to shift? \"))\nif op == \"encode\":\n    encoded_message = encode(msg, shift)\n    print(\"Encoded message:\", encoded_message)\nelif op == \"decode\":\n    decoded_message = decode(msg, shift)\n    print(\"Decoded message:\", decoded_message)\nelse:\n    print(\"Invalid operation. Please choose 'encode' or 'decode'.\")",
        "detail": "CODSOFT.Caesar_Cypher",
        "documentation": {}
    },
    {
        "label": "shift",
        "kind": 5,
        "importPath": "CODSOFT.Caesar_Cypher",
        "description": "CODSOFT.Caesar_Cypher",
        "peekOfCode": "shift = int(input(\"How many positions do you want to shift? \"))\nif op == \"encode\":\n    encoded_message = encode(msg, shift)\n    print(\"Encoded message:\", encoded_message)\nelif op == \"decode\":\n    decoded_message = decode(msg, shift)\n    print(\"Decoded message:\", decoded_message)\nelse:\n    print(\"Invalid operation. Please choose 'encode' or 'decode'.\")",
        "detail": "CODSOFT.Caesar_Cypher",
        "documentation": {}
    },
    {
        "label": "clear_screen",
        "kind": 2,
        "importPath": "CODSOFT.Calculator",
        "description": "CODSOFT.Calculator",
        "peekOfCode": "def clear_screen():\n    os.system(\"cls\" if os.name == \"nt\" else \"clear\")\ndef sum(a, b):\n    return a + b\ndef subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b == 0:",
        "detail": "CODSOFT.Calculator",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 2,
        "importPath": "CODSOFT.Calculator",
        "description": "CODSOFT.Calculator",
        "peekOfCode": "def sum(a, b):\n    return a + b\ndef subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b == 0:\n        print(\"Cannot divide by zero.\")\n        return None",
        "detail": "CODSOFT.Calculator",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "CODSOFT.Calculator",
        "description": "CODSOFT.Calculator",
        "peekOfCode": "def subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b == 0:\n        print(\"Cannot divide by zero.\")\n        return None\n    else:\n        return a / b",
        "detail": "CODSOFT.Calculator",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "CODSOFT.Calculator",
        "description": "CODSOFT.Calculator",
        "peekOfCode": "def multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b == 0:\n        print(\"Cannot divide by zero.\")\n        return None\n    else:\n        return a / b\ndef calculator():\n    clear_screen()",
        "detail": "CODSOFT.Calculator",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 2,
        "importPath": "CODSOFT.Calculator",
        "description": "CODSOFT.Calculator",
        "peekOfCode": "def divide(a, b):\n    if b == 0:\n        print(\"Cannot divide by zero.\")\n        return None\n    else:\n        return a / b\ndef calculator():\n    clear_screen()\n    a = int(input(\"Enter first number: \"))  # Ask for the first number initially\n    while True:",
        "detail": "CODSOFT.Calculator",
        "documentation": {}
    },
    {
        "label": "calculator",
        "kind": 2,
        "importPath": "CODSOFT.Calculator",
        "description": "CODSOFT.Calculator",
        "peekOfCode": "def calculator():\n    clear_screen()\n    a = int(input(\"Enter first number: \"))  # Ask for the first number initially\n    while True:\n        operation = input(\"Enter operation: \")\n        if operation not in ['+', '-', '*', '/']:\n            print(\"Invalid operation\")\n            continue\n        b = int(input(\"Enter 2nd number: \"))\n        if operation == \"+\":",
        "detail": "CODSOFT.Calculator",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 2,
        "importPath": "CODSOFT.Guess_the_number",
        "description": "CODSOFT.Guess_the_number",
        "peekOfCode": "def guess():\n    attempts = 5 if level == \"hard\" else 10\n    print(f\"You have only {attempts} attempts to guess.\")\n    for i in range(1, attempts + 1):\n        guess = int(input(\"Make a guess: \"))\n        diff = guess - guess1\n        if guess == guess1:\n            print(\"Correct. You won\")\n            break\n        elif diff > 15:",
        "detail": "CODSOFT.Guess_the_number",
        "documentation": {}
    },
    {
        "label": "guess1",
        "kind": 5,
        "importPath": "CODSOFT.Guess_the_number",
        "description": "CODSOFT.Guess_the_number",
        "peekOfCode": "guess1 = random.randint(1, 50)\nlevel = input(\"Choose your difficulty level (Hard or Easy): \").lower()\ndef guess():\n    attempts = 5 if level == \"hard\" else 10\n    print(f\"You have only {attempts} attempts to guess.\")\n    for i in range(1, attempts + 1):\n        guess = int(input(\"Make a guess: \"))\n        diff = guess - guess1\n        if guess == guess1:\n            print(\"Correct. You won\")",
        "detail": "CODSOFT.Guess_the_number",
        "documentation": {}
    },
    {
        "label": "level",
        "kind": 5,
        "importPath": "CODSOFT.Guess_the_number",
        "description": "CODSOFT.Guess_the_number",
        "peekOfCode": "level = input(\"Choose your difficulty level (Hard or Easy): \").lower()\ndef guess():\n    attempts = 5 if level == \"hard\" else 10\n    print(f\"You have only {attempts} attempts to guess.\")\n    for i in range(1, attempts + 1):\n        guess = int(input(\"Make a guess: \"))\n        diff = guess - guess1\n        if guess == guess1:\n            print(\"Correct. You won\")\n            break",
        "detail": "CODSOFT.Guess_the_number",
        "documentation": {}
    },
    {
        "label": "length_actual_word",
        "kind": 5,
        "importPath": "CODSOFT.Hangman_Game",
        "description": "CODSOFT.Hangman_Game",
        "peekOfCode": "length_actual_word = random.randrange(4, 5)\nstring1 = string.ascii_lowercase\nactual_word = \"\".join(random.choice(string1) for items in range(length_actual_word))\nprint(actual_word)\n#generate blanks\nsample = []\nfor word in actual_word:\n    sample += \"_\"\nprint(sample)\n#Guessing and loops",
        "detail": "CODSOFT.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "CODSOFT.Hangman_Game",
        "description": "CODSOFT.Hangman_Game",
        "peekOfCode": "string1 = string.ascii_lowercase\nactual_word = \"\".join(random.choice(string1) for items in range(length_actual_word))\nprint(actual_word)\n#generate blanks\nsample = []\nfor word in actual_word:\n    sample += \"_\"\nprint(sample)\n#Guessing and loops\nlife = (len(actual_word) + 1)",
        "detail": "CODSOFT.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "actual_word",
        "kind": 5,
        "importPath": "CODSOFT.Hangman_Game",
        "description": "CODSOFT.Hangman_Game",
        "peekOfCode": "actual_word = \"\".join(random.choice(string1) for items in range(length_actual_word))\nprint(actual_word)\n#generate blanks\nsample = []\nfor word in actual_word:\n    sample += \"_\"\nprint(sample)\n#Guessing and loops\nlife = (len(actual_word) + 1)\ngame_over = False",
        "detail": "CODSOFT.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "sample",
        "kind": 5,
        "importPath": "CODSOFT.Hangman_Game",
        "description": "CODSOFT.Hangman_Game",
        "peekOfCode": "sample = []\nfor word in actual_word:\n    sample += \"_\"\nprint(sample)\n#Guessing and loops\nlife = (len(actual_word) + 1)\ngame_over = False\nwhile not game_over:\n    guessed_word = input(\"Enter a letter: \").lower()\n    for i in range(len(actual_word)): #0,1,2,3....",
        "detail": "CODSOFT.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "life",
        "kind": 5,
        "importPath": "CODSOFT.Hangman_Game",
        "description": "CODSOFT.Hangman_Game",
        "peekOfCode": "life = (len(actual_word) + 1)\ngame_over = False\nwhile not game_over:\n    guessed_word = input(\"Enter a letter: \").lower()\n    for i in range(len(actual_word)): #0,1,2,3....\n        if actual_word[i] == guessed_word: \n            sample[i] = guessed_word\n    print(sample)\n    if guessed_word not in actual_word:\n        life -= 1",
        "detail": "CODSOFT.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "game_over",
        "kind": 5,
        "importPath": "CODSOFT.Hangman_Game",
        "description": "CODSOFT.Hangman_Game",
        "peekOfCode": "game_over = False\nwhile not game_over:\n    guessed_word = input(\"Enter a letter: \").lower()\n    for i in range(len(actual_word)): #0,1,2,3....\n        if actual_word[i] == guessed_word: \n            sample[i] = guessed_word\n    print(sample)\n    if guessed_word not in actual_word:\n        life -= 1\n        print(f\"Wrong guess. You are left with {life} lives\")",
        "detail": "CODSOFT.Hangman_Game",
        "documentation": {}
    },
    {
        "label": "account_info",
        "kind": 2,
        "importPath": "CODSOFT.Higher_Lower",
        "description": "CODSOFT.Higher_Lower",
        "peekOfCode": "def account_info(account):\n    a_name = account[\"name\"]\n    a_description = account[\"description\"]\n    a_country = account[\"country\"]\n    return (f\"{a_name}, {a_description}, from {a_country}\")\n#picking info\naccount1 = random.choice(data)\naccount2 = random.choice(data)\ncontinue_flag = True\nwhile continue_flag:",
        "detail": "CODSOFT.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "art",
        "kind": 5,
        "importPath": "CODSOFT.Higher_Lower",
        "description": "CODSOFT.Higher_Lower",
        "peekOfCode": "art = \"\"\"\n  .       ..-. \n   \\     /(   )\n    \\   /  `-. \n     \\ /  (   )\n      '    `-'  \"\"\"\ngame_logo = \"\"\"                                \n  |   ||,---.|   |,---.,---.\n  |---|||  _.|---||--- |---'\n  |   |||   ||   ||    |  \\ ",
        "detail": "CODSOFT.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "game_logo",
        "kind": 5,
        "importPath": "CODSOFT.Higher_Lower",
        "description": "CODSOFT.Higher_Lower",
        "peekOfCode": "game_logo = \"\"\"                                \n  |   ||,---.|   |,---.,---.\n  |---|||  _.|---||--- |---'\n  |   |||   ||   ||    |  \\ \n  `   '``---'`   '`---'`   `\n  |    ,---.. . .,---.,---. \n  |    |   || | ||--- |---' \n  |    |   || | ||    |  \\  \n  `---'`---'`-'-'`---'`   `   \"\"\"\ndata = [",
        "detail": "CODSOFT.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "CODSOFT.Higher_Lower",
        "description": "CODSOFT.Higher_Lower",
        "peekOfCode": "data = [\n    {\n        'name': 'Instagram',\n        'follower_count': 346,\n        'description': 'Social media platform',\n        'country': 'United States'\n    },\n    {\n        'name': 'Cristiano Ronaldo',\n        'follower_count': 215,",
        "detail": "CODSOFT.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "CODSOFT.Higher_Lower",
        "description": "CODSOFT.Higher_Lower",
        "peekOfCode": "score = 0\n# def accoun info\ndef account_info(account):\n    a_name = account[\"name\"]\n    a_description = account[\"description\"]\n    a_country = account[\"country\"]\n    return (f\"{a_name}, {a_description}, from {a_country}\")\n#picking info\naccount1 = random.choice(data)\naccount2 = random.choice(data)",
        "detail": "CODSOFT.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "account1",
        "kind": 5,
        "importPath": "CODSOFT.Higher_Lower",
        "description": "CODSOFT.Higher_Lower",
        "peekOfCode": "account1 = random.choice(data)\naccount2 = random.choice(data)\ncontinue_flag = True\nwhile continue_flag:\n    account1 = account2\n    account2 = random.choice(data)\n    while account1 == account2:\n        account2 = random.choice(data)\n    def check_answer(guess, follower1, follower2):\n        if follower1>follower2:",
        "detail": "CODSOFT.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "account2",
        "kind": 5,
        "importPath": "CODSOFT.Higher_Lower",
        "description": "CODSOFT.Higher_Lower",
        "peekOfCode": "account2 = random.choice(data)\ncontinue_flag = True\nwhile continue_flag:\n    account1 = account2\n    account2 = random.choice(data)\n    while account1 == account2:\n        account2 = random.choice(data)\n    def check_answer(guess, follower1, follower2):\n        if follower1>follower2:\n            if guess == 1:",
        "detail": "CODSOFT.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "continue_flag",
        "kind": 5,
        "importPath": "CODSOFT.Higher_Lower",
        "description": "CODSOFT.Higher_Lower",
        "peekOfCode": "continue_flag = True\nwhile continue_flag:\n    account1 = account2\n    account2 = random.choice(data)\n    while account1 == account2:\n        account2 = random.choice(data)\n    def check_answer(guess, follower1, follower2):\n        if follower1>follower2:\n            if guess == 1:\n                return True",
        "detail": "CODSOFT.Higher_Lower",
        "documentation": {}
    },
    {
        "label": "alphabets",
        "kind": 5,
        "importPath": "CODSOFT.password_generator",
        "description": "CODSOFT.password_generator",
        "peekOfCode": "alphabets = int(input(f\"Enet no of alphabets: \"))\nnumbers = int(input(f\"Enter no of numbers : \"))\nspecial = int(input(f\"Enter spec chars: \"))\nalphs = string.ascii_letters\nnumbs = string.digits\nspec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))",
        "detail": "CODSOFT.password_generator",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CODSOFT.password_generator",
        "description": "CODSOFT.password_generator",
        "peekOfCode": "numbers = int(input(f\"Enter no of numbers : \"))\nspecial = int(input(f\"Enter spec chars: \"))\nalphs = string.ascii_letters\nnumbs = string.digits\nspec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)",
        "detail": "CODSOFT.password_generator",
        "documentation": {}
    },
    {
        "label": "special",
        "kind": 5,
        "importPath": "CODSOFT.password_generator",
        "description": "CODSOFT.password_generator",
        "peekOfCode": "special = int(input(f\"Enter spec chars: \"))\nalphs = string.ascii_letters\nnumbs = string.digits\nspec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)\nrandom.shuffle(pass_list)",
        "detail": "CODSOFT.password_generator",
        "documentation": {}
    },
    {
        "label": "alphs",
        "kind": 5,
        "importPath": "CODSOFT.password_generator",
        "description": "CODSOFT.password_generator",
        "peekOfCode": "alphs = string.ascii_letters\nnumbs = string.digits\nspec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)\nrandom.shuffle(pass_list)\nfinal_password = ''.join(pass_list)",
        "detail": "CODSOFT.password_generator",
        "documentation": {}
    },
    {
        "label": "numbs",
        "kind": 5,
        "importPath": "CODSOFT.password_generator",
        "description": "CODSOFT.password_generator",
        "peekOfCode": "numbs = string.digits\nspec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)\nrandom.shuffle(pass_list)\nfinal_password = ''.join(pass_list)\nprint(final_password)",
        "detail": "CODSOFT.password_generator",
        "documentation": {}
    },
    {
        "label": "spec",
        "kind": 5,
        "importPath": "CODSOFT.password_generator",
        "description": "CODSOFT.password_generator",
        "peekOfCode": "spec = \"!@#$%^&*()_+-=[]{}|;:',.<>/?\"\npassword = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)\nrandom.shuffle(pass_list)\nfinal_password = ''.join(pass_list)\nprint(final_password)",
        "detail": "CODSOFT.password_generator",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "CODSOFT.password_generator",
        "description": "CODSOFT.password_generator",
        "peekOfCode": "password = ''\npassword += ''. join(random.choice(alphs) for any in range(1, alphabets+1))\npassword += ''.join(random.choice(numbs) for no in range(1, numbers+1))\npassword += ''.join(random.choice(spec) for spe in range (1, special+1))\npass_list = list(password)\nrandom.shuffle(pass_list)\nfinal_password = ''.join(pass_list)\nprint(final_password)",
        "detail": "CODSOFT.password_generator",
        "documentation": {}
    },
    {
        "label": "pass_list",
        "kind": 5,
        "importPath": "CODSOFT.password_generator",
        "description": "CODSOFT.password_generator",
        "peekOfCode": "pass_list = list(password)\nrandom.shuffle(pass_list)\nfinal_password = ''.join(pass_list)\nprint(final_password)",
        "detail": "CODSOFT.password_generator",
        "documentation": {}
    },
    {
        "label": "final_password",
        "kind": 5,
        "importPath": "CODSOFT.password_generator",
        "description": "CODSOFT.password_generator",
        "peekOfCode": "final_password = ''.join(pass_list)\nprint(final_password)",
        "detail": "CODSOFT.password_generator",
        "documentation": {}
    },
    {
        "label": "University",
        "kind": 6,
        "importPath": "CODSOFT.prac",
        "description": "CODSOFT.prac",
        "peekOfCode": "class University:\n  def __init__(self, name):\n    self.name = name\n  def show_details(self):\n    print(\"University:\", self.name)\nclass Department(University):\n  def __init__(self, name, department_name):\n    super().__init__(name)\n    self.department_name = department_name\n  def show_details(self):",
        "detail": "CODSOFT.prac",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "CODSOFT.prac",
        "description": "CODSOFT.prac",
        "peekOfCode": "class Department(University):\n  def __init__(self, name, department_name):\n    super().__init__(name)\n    self.department_name = department_name\n  def show_details(self):\n    super().show_details()\n    print(\"Department:\", self.department_name)\nclass Student(Department):  # Remove Office from inheritance\n  def __init__(self, name, department_name, student_name, department_object):  # Add department object\n    super().__init__(self, name, department_name)",
        "detail": "CODSOFT.prac",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "CODSOFT.prac",
        "description": "CODSOFT.prac",
        "peekOfCode": "class Student(Department):  # Remove Office from inheritance\n  def __init__(self, name, department_name, student_name, department_object):  # Add department object\n    super().__init__(self, name, department_name)\n    self.student_name = student_name\n    self.department_object = department_object  # Store department information\n  def show_details(self):\n    super().show_details()\n    print(\"Student Name:\", self.student_name)\n    # You can access department details through the department_object here\nclass Faculty(Department):",
        "detail": "CODSOFT.prac",
        "documentation": {}
    },
    {
        "label": "Faculty",
        "kind": 6,
        "importPath": "CODSOFT.prac",
        "description": "CODSOFT.prac",
        "peekOfCode": "class Faculty(Department):\n  def __init__(self, name, department_name, faculty_name):\n    super().__init__(name, department_name)\n    self.faculty_name = faculty_name\n  def show_details(self):\n    super().show_details()\n    print(\"Faculty Name:\", self.faculty_name)\n# Example usage:\nuni = University(\"Example University\")\ndept = Department(\"Example University\", \"Computer Science\")",
        "detail": "CODSOFT.prac",
        "documentation": {}
    },
    {
        "label": "uni",
        "kind": 5,
        "importPath": "CODSOFT.prac",
        "description": "CODSOFT.prac",
        "peekOfCode": "uni = University(\"Example University\")\ndept = Department(\"Example University\", \"Computer Science\")\nstudent = Student(\"Example University\", \"Computer Science\", \"John Doe\", dept)  # Pass department object\nfaculty = Faculty(\"Example University\", \"Computer Science\", \"Dr. Jane Smith\")\nuni.show_details()\nprint()\ndept.show_details()\nprint()\nstudent.show_details()  # Access department details through student.department_object if needed\nprint()",
        "detail": "CODSOFT.prac",
        "documentation": {}
    },
    {
        "label": "dept",
        "kind": 5,
        "importPath": "CODSOFT.prac",
        "description": "CODSOFT.prac",
        "peekOfCode": "dept = Department(\"Example University\", \"Computer Science\")\nstudent = Student(\"Example University\", \"Computer Science\", \"John Doe\", dept)  # Pass department object\nfaculty = Faculty(\"Example University\", \"Computer Science\", \"Dr. Jane Smith\")\nuni.show_details()\nprint()\ndept.show_details()\nprint()\nstudent.show_details()  # Access department details through student.department_object if needed\nprint()\nfaculty.show_details()",
        "detail": "CODSOFT.prac",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 5,
        "importPath": "CODSOFT.prac",
        "description": "CODSOFT.prac",
        "peekOfCode": "student = Student(\"Example University\", \"Computer Science\", \"John Doe\", dept)  # Pass department object\nfaculty = Faculty(\"Example University\", \"Computer Science\", \"Dr. Jane Smith\")\nuni.show_details()\nprint()\ndept.show_details()\nprint()\nstudent.show_details()  # Access department details through student.department_object if needed\nprint()\nfaculty.show_details()",
        "detail": "CODSOFT.prac",
        "documentation": {}
    },
    {
        "label": "faculty",
        "kind": 5,
        "importPath": "CODSOFT.prac",
        "description": "CODSOFT.prac",
        "peekOfCode": "faculty = Faculty(\"Example University\", \"Computer Science\", \"Dr. Jane Smith\")\nuni.show_details()\nprint()\ndept.show_details()\nprint()\nstudent.show_details()  # Access department details through student.department_object if needed\nprint()\nfaculty.show_details()",
        "detail": "CODSOFT.prac",
        "documentation": {}
    },
    {
        "label": "play_round",
        "kind": 2,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "def play_round(user_choice):\n    global num_rds, user_score, computer_score\n    game_emojis = [\"👊\", \"✌️\", \"✋\"]\n    choices = {\"Rock\": 0, \"Scissors\": 1, \"Paper\": 2}\n    user_choice = choices[user_choice]\n    computer_choice = random.randrange(0, 3)\n    # Check the winner\n    result = \"\"\n    if user_choice == computer_choice:\n        result = \"It's a tie\"",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "end_game",
        "kind": 2,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "def end_game():\n    messagebox.showinfo(\"Game Over\", f\"Game Over!\\n\\nPlayer Score: {user_score}\\nComputer Score: {computer_score}\")\n    root.destroy()\n# Create the main window\nroot = tk.Tk()\nroot.title(\"Rock Paper Scissors Game\")\n# Initialize variables\nnum_rds = 0\nuser_score = 0\ncomputer_score = 0",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Rock Paper Scissors Game\")\n# Initialize variables\nnum_rds = 0\nuser_score = 0\ncomputer_score = 0\n# Buttons for user choices\nrock_button = tk.Button(root, text=\"Rock\", command=lambda: play_round(\"Rock\"))\nrock_button.grid(row=0, column=0, padx=(0, 10))\nscissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "num_rds",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "num_rds = 0\nuser_score = 0\ncomputer_score = 0\n# Buttons for user choices\nrock_button = tk.Button(root, text=\"Rock\", command=lambda: play_round(\"Rock\"))\nrock_button.grid(row=0, column=0, padx=(0, 10))\nscissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))\nscissors_button.grid(row=0, column=2, padx=(10, 0))\npaper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "user_score",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "user_score = 0\ncomputer_score = 0\n# Buttons for user choices\nrock_button = tk.Button(root, text=\"Rock\", command=lambda: play_round(\"Rock\"))\nrock_button.grid(row=0, column=0, padx=(0, 10))\nscissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))\nscissors_button.grid(row=0, column=2, padx=(10, 0))\npaper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)\n# Labels to display choices and result",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "computer_score",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "computer_score = 0\n# Buttons for user choices\nrock_button = tk.Button(root, text=\"Rock\", command=lambda: play_round(\"Rock\"))\nrock_button.grid(row=0, column=0, padx=(0, 10))\nscissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))\nscissors_button.grid(row=0, column=2, padx=(10, 0))\npaper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)\n# Labels to display choices and result\nuser_label = tk.Label(root, text=\"\")",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "rock_button",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "rock_button = tk.Button(root, text=\"Rock\", command=lambda: play_round(\"Rock\"))\nrock_button.grid(row=0, column=0, padx=(0, 10))\nscissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))\nscissors_button.grid(row=0, column=2, padx=(10, 0))\npaper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)\n# Labels to display choices and result\nuser_label = tk.Label(root, text=\"\")\nuser_label.grid(row=1, column=0, columnspan=3)\ncomputer_label = tk.Label(root, text=\"\")",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "scissors_button",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "scissors_button = tk.Button(root, text=\"Scissors\", command=lambda: play_round(\"Scissors\"))\nscissors_button.grid(row=0, column=2, padx=(10, 0))\npaper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)\n# Labels to display choices and result\nuser_label = tk.Label(root, text=\"\")\nuser_label.grid(row=1, column=0, columnspan=3)\ncomputer_label = tk.Label(root, text=\"\")\ncomputer_label.grid(row=2, column=0, columnspan=3)\nresult_label = tk.Label(root, text=\"\")",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "paper_button",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "paper_button = tk.Button(root, text=\"Paper\", command=lambda: play_round(\"Paper\"))\npaper_button.grid(row=0, column=1)\n# Labels to display choices and result\nuser_label = tk.Label(root, text=\"\")\nuser_label.grid(row=1, column=0, columnspan=3)\ncomputer_label = tk.Label(root, text=\"\")\ncomputer_label.grid(row=2, column=0, columnspan=3)\nresult_label = tk.Label(root, text=\"\")\nresult_label.grid(row=3, column=0, columnspan=3)\n# Labels to display scores",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "user_label",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "user_label = tk.Label(root, text=\"\")\nuser_label.grid(row=1, column=0, columnspan=3)\ncomputer_label = tk.Label(root, text=\"\")\ncomputer_label.grid(row=2, column=0, columnspan=3)\nresult_label = tk.Label(root, text=\"\")\nresult_label.grid(row=3, column=0, columnspan=3)\n# Labels to display scores\nplayer_score_label = tk.Label(root, text=f\"Player Score: {user_score}\")\nplayer_score_label.grid(row=4, column=0, columnspan=3)\ncomputer_score_label = tk.Label(root, text=f\"Computer Score: {computer_score}\")",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "computer_label",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "computer_label = tk.Label(root, text=\"\")\ncomputer_label.grid(row=2, column=0, columnspan=3)\nresult_label = tk.Label(root, text=\"\")\nresult_label.grid(row=3, column=0, columnspan=3)\n# Labels to display scores\nplayer_score_label = tk.Label(root, text=f\"Player Score: {user_score}\")\nplayer_score_label.grid(row=4, column=0, columnspan=3)\ncomputer_score_label = tk.Label(root, text=f\"Computer Score: {computer_score}\")\ncomputer_score_label.grid(row=5, column=0, columnspan=3)\n# Run the application",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "result_label",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "result_label = tk.Label(root, text=\"\")\nresult_label.grid(row=3, column=0, columnspan=3)\n# Labels to display scores\nplayer_score_label = tk.Label(root, text=f\"Player Score: {user_score}\")\nplayer_score_label.grid(row=4, column=0, columnspan=3)\ncomputer_score_label = tk.Label(root, text=f\"Computer Score: {computer_score}\")\ncomputer_score_label.grid(row=5, column=0, columnspan=3)\n# Run the application\nroot.mainloop()",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "player_score_label",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "player_score_label = tk.Label(root, text=f\"Player Score: {user_score}\")\nplayer_score_label.grid(row=4, column=0, columnspan=3)\ncomputer_score_label = tk.Label(root, text=f\"Computer Score: {computer_score}\")\ncomputer_score_label.grid(row=5, column=0, columnspan=3)\n# Run the application\nroot.mainloop()",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "computer_score_label",
        "kind": 5,
        "importPath": "CODSOFT.Rock_Paper_Scissor",
        "description": "CODSOFT.Rock_Paper_Scissor",
        "peekOfCode": "computer_score_label = tk.Label(root, text=f\"Computer Score: {computer_score}\")\ncomputer_score_label.grid(row=5, column=0, columnspan=3)\n# Run the application\nroot.mainloop()",
        "detail": "CODSOFT.Rock_Paper_Scissor",
        "documentation": {}
    },
    {
        "label": "clear_screen",
        "kind": 2,
        "importPath": "CODSOFT.Silent_Auction",
        "description": "CODSOFT.Silent_Auction",
        "peekOfCode": "def clear_screen():\n    os.system(\"cls\")\nprint(\"*********Welcome to Silent Auction***********\")\ndef highest_bidder():\n    bidding_data = {}\n    while True:\n        name = input(\"Enter your name: \")\n        is_company = input(\"Are you from a company? (yes/no): \").lower()\n        if is_company == \"yes\":\n            company_name = input(\"Enter the name of your company: \")",
        "detail": "CODSOFT.Silent_Auction",
        "documentation": {}
    },
    {
        "label": "highest_bidder",
        "kind": 2,
        "importPath": "CODSOFT.Silent_Auction",
        "description": "CODSOFT.Silent_Auction",
        "peekOfCode": "def highest_bidder():\n    bidding_data = {}\n    while True:\n        name = input(\"Enter your name: \")\n        is_company = input(\"Are you from a company? (yes/no): \").lower()\n        if is_company == \"yes\":\n            company_name = input(\"Enter the name of your company: \")\n        else:\n            company_name = None\n        bid = int(input(\"Enter your bid value: \"))",
        "detail": "CODSOFT.Silent_Auction",
        "documentation": {}
    }
]